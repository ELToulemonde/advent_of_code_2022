/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package advent_kotlin

import advent_kotlin.domain.Position
import advent_kotlin.domain.VentLine
import kotlin.test.Test
import kotlin.test.assertFalse
import kotlin.test.assertNotNull
import kotlin.test.assertTrue

class VentLineTest {
    @Test
    fun ventLine01to03goThrough01() {
        // Given
        val ventLine = VentLine(Position(0, 1), Position(0, 3))
        val position = Position(0, 1)

        // When
        val goThrough: Boolean = ventLine.goThrough(position)

        // Then
        assertTrue(goThrough)
    }

    @Test
    fun ventLine01to03goThrough03() {
        // Given
        val ventLine = VentLine(Position(0, 1), Position(0, 3))
        val position = Position(0, 3)

        // When
        val goThrough: Boolean = ventLine.goThrough(position)

        // Then
        assertTrue(goThrough)
    }


    @Test
    fun ventLine01to03dontGoThrough04() {
        // Given
        val ventLine = VentLine(Position(0, 1), Position(0, 3))
        val position = Position(0, 4)

        // When
        val goThrough: Boolean = ventLine.goThrough(position)

        // Then
        assertFalse(goThrough)
    }

    @Test
    fun ventLine01to03goThrough02() {
        // Given
        val ventLine = VentLine(Position(0, 1), Position(0, 3))
        val position = Position(0, 2)

        // When
        val goThrough: Boolean = ventLine.goThrough(position)

        // Then
        assertTrue(goThrough)
    }

    @Test
    fun ventLine10to30goThrough10() {
        // Given
        val ventLine = VentLine(Position( 1, 0), Position( 3, 0))
        val position = Position( 1, 0)

        // When
        val goThrough: Boolean = ventLine.goThrough(position)

        // Then
        assertTrue(goThrough)
    }

    @Test
    fun ventLine10to30goThrough30() {
        // Given
        val ventLine = VentLine(Position( 1, 0), Position( 3, 0))
        val position = Position( 3, 0)

        // When
        val goThrough: Boolean = ventLine.goThrough(position)

        // Then
        assertTrue(goThrough)
    }


    @Test
    fun ventLine10to30dontGoThrough40() {
        // Given
        val ventLine = VentLine(Position( 1, 0), Position( 3, 0))
        val position = Position( 4, 0)

        // When
        val goThrough: Boolean = ventLine.goThrough(position)

        // Then
        assertFalse(goThrough)
    }

    @Test
    fun ventLine10to30goThrough20() {
        // Given
        val ventLine = VentLine(Position( 1, 0), Position( 3, 0))
        val position = Position( 2, 0)

        // When
        val goThrough: Boolean = ventLine.goThrough(position)

        // Then
        assertTrue(goThrough)
    }

    @Test
    fun isDiagonalLineWhenTopLeftToBottomRightIsTrue() {
        // Given
        val ventLine = VentLine(Position(0, 0), Position(3, 3))

        // When
        val isDiagonal = ventLine.isDiagonalLine()

        // Then
        assertTrue(isDiagonal)
    }

    @Test
    fun isDiagonalLineWhenBottomRightToTopLeftIsTrue() {
        // Given
        val ventLine = VentLine(Position(3, 3), Position(0, 0))

        // When
        val isDiagonal = ventLine.isDiagonalLine()

        // Then
        assertTrue(isDiagonal)
    }
    @Test
    fun isDiagonalLineWhenBottomLeftToTopRightIsTrue() {
        // Given
        val ventLine = VentLine(Position(3, 0), Position(0, 3))

        // When
        val isDiagonal = ventLine.isDiagonalLine()

        // Then
        assertTrue(isDiagonal)
    }
    @Test
    fun isDiagonalLineWhenIsFalse() {
        // Given
        val ventLine = VentLine(Position(3, 1), Position(0, 3))

        // When
        val isDiagonal = ventLine.isDiagonalLine()

        // Then
        assertFalse(isDiagonal)
    }
}

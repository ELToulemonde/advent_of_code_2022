/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package advent_kotlin

import advent_kotlin.domain.CratesMove
import advent_kotlin.domain.CratesStack
import advent_kotlin.domain.CratesStacks
import kotlin.test.Test
import kotlin.test.assertEquals

class CratesStackTest {
    @Test
    fun removeTopCrate() {
        // Given
        val cratesStack = CratesStack(mutableListOf("A", "B", "C"))
        val expectedTopCrate = "C"
        // When
        val topCrate = cratesStack.removeTopCrate()

        // Then
        assertEquals(expectedTopCrate, topCrate)
        assertEquals(mutableListOf("A", "B"), cratesStack.crates)
    }
    @Test
    fun removeTopCrates() {
        // Given
        val cratesStack = CratesStack(mutableListOf("A", "B", "C"))
        val expectedTopCrates = mutableListOf("B", "C")

        // When
        val topCrates = cratesStack.removeTopCrates(2)

        // Then
        assertEquals(expectedTopCrates, topCrates)
        assertEquals(mutableListOf("A"), cratesStack.crates)
    }

    @Test
    fun addCrateToTop() {
        // Given
        val cratesStack = CratesStack(mutableListOf("A", "B", "C"))
        val crateToAdd = "D"

        // When
        val topCrate = cratesStack.addCrateToTop(crateToAdd)

        // Then
        assertEquals(mutableListOf("A", "B", "C", "D"), cratesStack.crates)
    }

    @Test
    fun addToBottom() {
        // Given
        val cratesStack = CratesStack(mutableListOf("A", "B", "C"))
        val crateToAdd = "D"

        // When
        val topCrate = cratesStack.addToBottom(crateToAdd)

        // Then
        assertEquals(mutableListOf("D", "A", "B", "C"), cratesStack.crates)
    }

}

class CratesStacksTest {
    @Test
    fun applyMove() {
        // Given
        val cratesStack1 = CratesStack(mutableListOf("A", "B", "C"))
        val cratesStack2 = CratesStack(mutableListOf("D", "E"))
        val cratesStacks = CratesStacks(listOf(cratesStack1, cratesStack2))
        val move = CratesMove(2, 1, 2)
        val expectedCratesStacks =
            CratesStacks(listOf(CratesStack(mutableListOf("A")), CratesStack(mutableListOf("D", "E", "C", "B"))))

        // When
        cratesStacks.applyMove(move)

        // Then
        assertEquals(expectedCratesStacks.cratesStacks[0].crates, cratesStacks.cratesStacks[0].crates)
        assertEquals(expectedCratesStacks.cratesStacks[1].crates, cratesStacks.cratesStacks[1].crates)
    }
}

